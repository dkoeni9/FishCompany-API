# Generated by Django 5.1.2 on 2025-04-23 02:59

import api.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.functions.datetime
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Fish",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "fishes",
                "db_table": "fish",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                ("middle_name", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "is_superuser",
                    models.BooleanField(db_default=models.Value(False), default=False),
                ),
                (
                    "is_staff",
                    models.BooleanField(db_default=models.Value(False), default=False),
                ),
                (
                    "is_active",
                    models.BooleanField(db_default=models.Value(True), default=True),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        db_default=django.db.models.functions.datetime.Now(),
                        default=django.utils.timezone.now,
                    ),
                ),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "user",
                "managed": True,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "owner",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="company",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("address", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name_plural": "companies",
                "db_table": "company",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="FishBase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.company",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("address", models.CharField(max_length=255)),
                ("latitude", models.DecimalField(decimal_places=6, max_digits=9)),
                ("longitude", models.DecimalField(decimal_places=6, max_digits=9)),
                ("entry_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "price_per_hour",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True, null=True, upload_to=api.models.fishbase_photo_path
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "fish_base",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="FishInBase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fish_base",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.fishbase"
                    ),
                ),
                (
                    "fish",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.fish"
                    ),
                ),
                (
                    "price_per_kilo",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
            ],
            options={
                "unique_together": {("fish_base", "fish")},
            },
        ),
        migrations.AddField(
            model_name="fishbase",
            name="fish",
            field=models.ManyToManyField(
                related_name="bases", through="api.FishInBase", to="api.fish"
            ),
        ),
        migrations.CreateModel(
            name="StaffProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "fish_base",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff",
                        to="api.fishbase",
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "staff_profile",
                "managed": True,
            },
        ),
    ]
